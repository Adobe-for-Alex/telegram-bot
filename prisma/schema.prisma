// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  /// Telegram ID.
  id                       String         @id
  createdAt                DateTime       @default(now())
  admin                    Admin?
  payments                 Payment[]
  subscriptions            Subscription[]
  sessions                 Session[]
  personalDiscount         Int            @default(0)
  personalDiscountExpireAt DateTime       @default(now())
  lastAction               DateTime       @default(now())
}

model Admin {
  userId   String                @id @unique
  user     User                  @relation(fields: [userId], references: [id])
  requests CheckPaymentRequest[]
}

model Plan {
  id               Int        @id @default(autoincrement())
  durationInMonths Int
  price            Float
  secret           Boolean
  isSingle         Boolean    @default(false)
  payments         Payment[]
  Discount         Discount[]
}

model Payment {
  id           Int                  @id @default(autoincrement())
  userId       String
  planId       Int
  /// Contain part of full URL to Telegram file
  receiptUrl   String
  createdAt    DateTime             @default(now())
  user         User                 @relation(fields: [userId], references: [id])
  plan         Plan                 @relation(fields: [planId], references: [id])
  checkRequest CheckPaymentRequest?
}

model CheckPaymentRequest {
  paymentId Int      @id
  adminId   String
  createdAt DateTime @default(now())
  payment   Payment  @relation(fields: [paymentId], references: [id])
  admin     Admin    @relation(fields: [adminId], references: [userId])
  approve   Approve?
  reject    Reject?
}

model Approve {
  requestId    Int                 @id
  createdAt    DateTime            @default(now())
  request      CheckPaymentRequest @relation(fields: [requestId], references: [paymentId])
  subscription Subscription?
}

model Reject {
  requestId Int                 @id
  reason    String
  createdAt DateTime            @default(now())
  request   CheckPaymentRequest @relation(fields: [requestId], references: [paymentId])
}

model Subscription {
  approveId      Int      @id @unique
  userId         String
  expiredAt      DateTime
  createdAt      DateTime @default(now())
  approve        Approve  @relation(fields: [approveId], references: [requestId])
  user           User     @relation(fields: [userId], references: [id])
  expireSent     Boolean  @default(false)
  expireSoonSent Boolean  @default(false)
}

model Session {
  /// Session ID from subscription-service
  id        String   @id
  userId    String
  email     String
  password  String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Discount {
  id       Int      @id
  price    Int
  expireAt DateTime
  plan     Plan     @relation(fields: [id], references: [id])
}

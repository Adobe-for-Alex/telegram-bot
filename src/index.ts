import { Menu, MenuRange } from "@grammyjs/menu"
import {Bot, Context, Keyboard, session, SessionFlavor} from "grammy"
import { PlanId } from "./aliases"
import { PrismaClient } from "@prisma/client"
import PlansInPrisma from "./plans/PlansInPrisma"
import UsersInPrisma from "./users/UsersInPrisma"
import AdminsInPrisma from "./admins/AdminsInPrisma"
import express from "express"
import SubscriptionService from "./sessions/SubscriptionService"
import NotificationService from "./notification/notification";
import DiscountService from "./discount/discount";
import ReferralService from "./referral/referral";
import cron from 'node-cron'

const token = process.env['TELEGRAM_BOT_TOKEN']
if (!token) throw new Error('TELEGRAM_BOT_TOKEN is undefined')
const subscriptionServiceBaseUrl = process.env['SUBSCRIPTION_SERVICE_BASE_URL']
if (!subscriptionServiceBaseUrl) throw new Error('SUBSCRIPTION_SERVICE_BASE_URL is undefined')
const webhookPath = process.env['SUBSCRIPTION_SERVICE_WEBHOOK_UPDATE_PATH']
if (!webhookPath) throw new Error('SUBSCRIPTION_SERVICE_WEBHOOK_UPDATE_PATH is undefined')

const prisma = new PrismaClient()
const plans = new PlansInPrisma(prisma)
const users = new UsersInPrisma(prisma)
const discount = new DiscountService(prisma);
const referral = new ReferralService(prisma);
const sessions = new SubscriptionService(new URL(subscriptionServiceBaseUrl), prisma)

interface Session {
  planId?: PlanId,
  planType?: string,
  product?: string
}
type ContextWithSession = Context & SessionFlavor<Session>

const bot = new Bot<ContextWithSession>(token)
bot.use(session({ initial: () => ({}) }))
bot.use((ctx, next) => {
  console.log(`User ${ctx.from?.id} Chat ${ctx.chat?.id} Message ${ctx.message?.message_id} Callback ${ctx.update.callback_query?.data}`)
  return next()
})
const notification = new NotificationService(prisma, bot as unknown as Bot);

const admins = new AdminsInPrisma(bot.api, prisma)
bot.use(admins.middleware(plans, users, sessions))
bot.use(discount.middleware());

cron.schedule('*/1 * * * *', async () => {
  await notification.notifyExpireSoon();
  await notification.notifyExpired();
  await discount.checkForPersonalDiscounts(notification);
});

const paymentMenu = new Menu<ContextWithSession>('payment-menu')
    .text('–û—Ç–º–µ–Ω–∏—Ç—å', async ctx => {
      if (ctx.session.planId === undefined) return
      delete ctx.session.planId
      await ctx.deleteMessage();
      await ctx.reply('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    }).row()
    .back('–ù–∞–∑–∞–¥', async ctx => {
      await ctx.editMessageText('–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–∞—Ä–∏—Ñ.')
      ctx.menu.nav('new-subscription')
    })

const products = [
  'Photoshop',
  'Illustrator',
  'Firefly –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
  'After Effects',
  'Premier Pro',
  'Lightroom',
  'Lightroom Classic',
  'Acrobat',
  'Character Animator',
  'Incopy',
  'InDesign',
  'Animate',
  'Fresco',
  'Premier Rush',
  'Audition'
]

const productMenu = new Menu<ContextWithSession>('product-menu')
    .dynamic(async () => {
      const range = new MenuRange<ContextWithSession>()
      for (const product of products) {
        range.text(product, async ctx => {
          ctx.session.product = product;
          if (!ctx.session.planId) return;
          const plan = await plans.withId(ctx.session.planId);
          if (!plan) return;
          await ctx.deleteMessage();
          await ctx.reply(
              `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç: ${product}
${await plan.asString()}
–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º —á–µ–∫
–†–µ–∫–≤–µ–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: <—Ä–µ–∫–≤–∏–∑–∏—Ç—ã>`,
              { reply_markup: paymentMenu }
          )
        }).row()
      }
      return range;
    })
    .back('–ù–∞–∑–∞–¥')

const monthMenu = new Menu<ContextWithSession>('month-menu')
    .dynamic(async (ctx) => {
      const range = new MenuRange<ContextWithSession>()
      for (const plan of await plans.all()) {
        if (ctx.session.planType === 'one' && await plan.isSingle()) {
          range.text(await plan.asString(), async ctx => {
            await ctx.deleteMessage();
            ctx.session.planId = await plan.id();
            await ctx.reply(
                'Adobe Creative Cloud  –æ–¥–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n' +
                '- –õ—é–±–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏–∑ –≤—Å–µ—Ö –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä\n' +
                '- 1000 –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ (–≤ —Å–ª—É—á–∞–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å Firefly)\n' +
                '- 2 –¢–ë –æ–±–ª–∞–∫–∞\n' +
                '- –î–ª—è 2-—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n' +
                '- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Windows, Mac, iOS, iPadOS, Android\n' +
                '- –ù–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n' +
                '- –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è \n',
                { reply_markup: productMenu }
            );
          }).row()
        } else if (ctx.session.planType === 'all' && !(await plan.isSingle())) {
          range.text(await plan.asString(), async ctx => {
            await ctx.deleteMessage();
            ctx.session.planId = await plan.id();
            await ctx.reply(
                `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: ${await plan.asString()} —Ä—É–±–ª–µ–π
–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º —á–µ–∫
–†–µ–∫–≤–µ–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: <—Ä–µ–∫–≤–∏–∑–∏—Ç—ã>`,
                { reply_markup: paymentMenu }
            )
          }).row()
        }
      }
      return range;
    })
    .back('–ù–∞–∑–∞–¥')
monthMenu.register(paymentMenu);
monthMenu.register(productMenu);

const typeMenu = new Menu<ContextWithSession>('type-menu')
    .text('Adobe CC –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è + –ò–ò', async ctx => {
      await ctx.deleteMessage();
      ctx.session.planType = 'all';
      await ctx.reply(
          '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥',
          { reply_markup: monthMenu }
      )
    }).row()
    .text('Adobe CC –æ–¥–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', async ctx => {
      await ctx.deleteMessage();
      ctx.session.planType = 'one';
      await ctx.reply(
          'Adobe Creative Cloud  –æ–¥–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n' +
          '- –õ—é–±–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏–∑ –≤—Å–µ—Ö –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä\n' +
          '- 1000 –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ (–≤ —Å–ª—É—á–∞–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å Firefly)\n' +
          '- 2 –¢–ë –æ–±–ª–∞–∫–∞\n' +
          '- –î–ª—è 2-—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n' +
          '- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Windows, Mac, iOS, iPadOS, Android\n' +
          '- –ù–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n' +
          '- –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è \n',
          { reply_markup: monthMenu }
      )
    }).row()
typeMenu.register(monthMenu);
bot.use(typeMenu.middleware());

bot.command('start', async ctx => {
  const referralCode = ctx.message?.text.split(' ')[1];
  if (referralCode) {
    await referral.createReferral(referralCode, ctx.from?.id.toString() ?? '1');
  }
  await ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å.',
      {
        reply_markup: new Keyboard()
          .text('–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞üìù').row()
          .text('–û–ø–ª–∞—Ç–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—Éüí∏').row()
          .text('–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ. –î—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥‚öôÔ∏è').row()
          .text('–û–Ω–ª–∞–π–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∞üë®üèΩ‚Äçüíª').row()
          .text('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞').row()
          .resized()
      }
  )
})

bot.hears('–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞üìù', async ctx => {
  if (ctx.from === undefined) return
  const user = await users.withId(`${ctx.from.id}`)
  const subscription = await user.subscrption()
  if (subscription === undefined || await subscription.ended() < new Date()) {
    await ctx.reply('–£ –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–µ—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏')
    return
  }
  await ctx.reply(await subscription.asString())
})

bot.hears('–û–ø–ª–∞—Ç–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—Éüí∏', async ctx => {
  await ctx.reply(
      '–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–∞—Ä–∏—Ñ.',
      { reply_markup: typeMenu }
  )
})

bot.hears('–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ. –î—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥‚öôÔ∏è', async ctx => {
  await ctx.reply(
      '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üëã –ö–æ–º–∞–Ω–¥–∞ SoftPlus —Ä–∞–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å!\n' +
      '\n' +
      '–ú—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –∏ –∏—â–µ–º –Ω–æ–≤—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏. –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –¥—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥–∞ ‚Äî —ç—Ç–æ –º–æ–¥–µ–ª—å, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ä–µ–∞–ª–∏–∑—É–µ—Ç–µ –Ω–∞—à —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ —Å–≤–æ–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: –ê–≤–∏—Ç–æ, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∞–π—Ç, –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã –∏–ª–∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —É–¥–æ–±–Ω—ã–µ –¥–ª—è –≤–∞—Å –∫–∞–Ω–∞–ª—ã.\n' +
      '–í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç–µ —Å–≤–æ–∏ –ø—Ä–æ–¥–∞–∂–∏, —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ —Ü–µ–Ω—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –Ω–∞ —Å–≤–æ–µ–π —Ä–∞–∑–Ω–∏—Ü–µ.\n' +
      '\n' +
      '–î–ª—è –≤–∞—Å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å:\n' +
      ' ‚Ä¢ —Å–æ–∑–¥–∞—ë—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤,\n' +
      ' ‚Ä¢ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞–ø—Ä—è–º—É—é,\n' +
      ' ‚Ä¢ –≤—ã–¥–∞—ë—Ç –Ω–æ–≤—ã–µ –≤ —Å–ª—É—á–∞–µ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–æ–≤,\n' +
      ' ‚Ä¢ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.\n' +
      '\n' +
      '–í—Å—ë, —á—Ç–æ –æ—Ç –≤–∞—Å —Ç—Ä–µ–±—É–µ—Ç—Å—è, ‚Äî –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞, –∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è.\n' +
      '\n' +
      '–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n' +
      ' ‚Ä¢ üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥–∞: –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞–º, –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏, –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å, –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –∑–∞–º–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –±—É–¥—É—Ç!\n' +
      ' ‚Ä¢ üí∞ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã: –î–ª—è –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–µ–π—Å—Ç–≤—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n' +
      ' ‚Ä¢ üöÄ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ú—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.\n' +
      '\n' +
      '–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ —á–∏—Å–ª–µ –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!\n' +
      '–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\n' +
      'üì© @softplus_ww (—Å 08:00 –¥–æ 23:00 –ø–æ –ú–°–ö –µ–∂–µ–¥–Ω–µ–≤–Ω–æ).\n' +
      '\n' +
      '–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n' +
      '–ö–æ–º–∞–Ω–¥–∞ SoftPlus'
  )
})

bot.hears('–û–Ω–ª–∞–π–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∞üë®üèΩ‚Äçüíª', async ctx => {
  await ctx.reply(
      '–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @softplus_ww'
  )
})

bot.hears('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', async ctx => {
  const user = await users.withId(`${ctx.from?.id}`);
  const referralLink = referral.getReferralCode(await user.id());
  await ctx.reply(
    `–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${referralLink}\n` +
    `–£ –≤–∞—Å ${await referral.getReferralsCount(`${ctx.from?.id}`)} —Ä–µ—Ñ–µ—Ä–∞–ª–ª–æ–≤, ` +
    `–í–∞—à–∞ —Å–∫–∏–¥–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${await referral.getDiscountPercent(`${ctx.from?.id}`)}%`
  );
})

bot.on(['message:document', 'message:photo'], async ctx => {
  const planId = ctx.session.planId
  if (planId === undefined) return
  const plan = await plans.withId(planId)
  if (!plan) {
    await ctx.reply('–û—à–∏–±–∫–∞! –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
    return
  }
  const admin = await admins.any()
  try {
    const filePath = await ctx.getFile().then(x => x.file_path)
    if (filePath === undefined) throw new Error('Failed to get file_path of document')
    await admin.requestCheck(plan, await users.withId(`${ctx.from.id}`), ctx.message.message_id, filePath)
    delete ctx.session.planId
  } catch (e) {
    await ctx.reply('–û—à–∏–±–∫–∞! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∫–æ–≥–¥–∞ –º—ã –Ω–∞–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. '
      + '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤')
    throw e
  }
  await ctx.reply('–í–∞—à —á–µ–∫ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
})

bot.catch(details => console.error(`User ${details.ctx.from?.id} Chat ${details.ctx.chat?.id}`, details.error))
bot.start({ onStart: () => console.log('Bot started') })

const webhook = express().use(express.json())
webhook.use((req, _, next) => {
  console.log(req.method, req.path, 'Query:', req.query, 'Body:', req.body)
  return next()
})
webhook.post(webhookPath, async (req, res, next) => {
  try {
    const { id, email, password } = req.body
    await sessions.update(id, email, password)
    const user = await sessions.withId(id).then(x => x?.user())
    if (!user) throw new Error(`Session ${id} not found while update it`)
    await bot.api.sendMessage(
      await user.id(),
      `–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã:

${await user.subscrption().then(x => x?.asString())}`
    )
    res.status(200).send('Updated')
  } catch (e) {
    return next(e)
  }
})
webhook.listen(8080, () => console.log('Server started'))
